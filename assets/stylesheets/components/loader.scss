/* Loading effect css courtesy of https://ihatetomatoes.net/create-css3-spinning-preloader/, adapted into scss */

//The wrapper to take up the whole viewport, so the width and height are set to 100%
#loader-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: $baseLoadZIndex;
    #loader {
        //These declarations, including :before and :after, generate 3 circles that envelop each other. All but the top sides of the circles are then set to transparent so that when the spin animation is applied it gives the effect of lines going around in a circle
        @include loaderBorder(relative, $loaderTopPosition, 0, 0, 50%);
        @include animation(spin, 2s);
        display: block;
        width: 150px;
        height: 150px;
        margin: -75px 0 0 -75px;
        z-index: $baseLoadZIndex + 500;
        &:before {
            @include loaderBorder(absolute, 5px, 5px, 5px, 5px);
            @include animation(spin, 3s);
        }
        &:after {
            @include loaderBorder(absolute, 15px, 15px, 15px, 15px);
            @include animation(spin, 1.5s);
        }
    }
    p {
        color: white;
        z-index: $baseLoadZIndex + 1000;
        display: block;
        position: relative;
        top: $loaderTopPosition;
        text-align: center;
        font-size: 2rem;
    }
    /*The loader sections are divided into left and right to give a curtain opening effect*/
    .loader-section {
        position: fixed;
        top: 0;
        width: 51%;
        height: 100%;
        background: #9bcd64;
        z-index: $baseLoadZIndex - 1;
    }
    .loader-section.section-left {
        left: 0;
    }
    .loader-section.section-right {
        right: 0;
    }
}

/* MIXINS */
/* note: if you don't include any arguments, you don't need the () in either the mixin declaration or when you include */
@mixin button($color, $size) {
    width: $size;
    height: $size / 2;
    color: $color;
    border: 1px solid $color;
    /* you can implement logic within a mixin */
    /* this statement says that if someone specifies the color as red, it will be set to white. If the color is not set to red it will just leave the color set as it is */
    @if $color == #e84610 {
        color: #fff;
    } @else {
        $color: $color;
    }
}

/* this is how you call the mixin */
.btn {
    @include button(#e84610, 200px)
}

@include keyframes(spin) {
    0%   {
        -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
        -ms-transform: rotate(0deg);  /* IE 9 */
        transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
    }
    100% {
        -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
        -ms-transform: rotate(360deg);  /* IE 9 */
        transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
    }
}
// @include keyframes(spin);

// @-webkit-keyframes spin {
//     0%   {
//         -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
//         -ms-transform: rotate(0deg);  /* IE 9 */
//         transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
//     }
//     100% {
//         -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
//         -ms-transform: rotate(360deg);  /* IE 9 */
//         transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
//     }
// }
// @keyframes spin {
//     0%   {
//         -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
//         -ms-transform: rotate(0deg);  /* IE 9 */
//         transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
//     }
//     100% {
//         -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
//         -ms-transform: rotate(360deg);  /* IE 9 */
//         transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
//     }
// }

/* Loaded */
.loaded {
    #loader-wrapper {
        visibility: hidden;
        
        -webkit-transform: translateY(-100%);
            -ms-transform: translateY(-100%);
                transform: translateY(-100%);
 
        -webkit-transition: all 0.1s 0.6s ease-out; 
                transition: all 0.1s 0.6s ease-out;
                
        #loader, p {
            opacity: 0;
            -webkit-transition: all 0.1s ease-out; 
            transition: all 0.1s ease-out;
        }
        .loader-section.section-left {
            -webkit-transform: translateX(-100%);  /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: translateX(-100%);  /* IE 9 */
            transform: translateX(-100%);  /* Firefox 16+, IE 10+, Opera */
            
            -webkit-transition: all 0.1s 0.1s ease-out; 
            transition: all 0.1s 0.1s ease-out;
        }
        .loader-section.section-right {
            -webkit-transform: translateX(100%);  /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: translateX(100%);  /* IE 9 */
            transform: translateX(100%);  /* Firefox 16+, IE 10+, Opera */
            
            -webkit-transition: all 0.1s 0.1s ease-out; 
            transition: all 0.1s 0.1s ease-out;
        }
    }
}

/* No JS fallback */

.no-js {
    #loader-wrapper {
    display: none;
    }
}

.no-js {
    h1 {
    color: #222222;
    }
}